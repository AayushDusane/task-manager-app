from pydantic import BaseModel, Field
from typing import Optional

# This file defines the data models (schemas) for the API using Pydantic.
# Pydantic handles data validation, serialization, and deserialization,
# ensuring the data sent to and from your API is well-structured.

# --- User Schemas ---
# Schema for creating a new user (used for the registration endpoint).
# It inherits from BaseModel to get Pydantic's validation features.
class UserCreate(BaseModel):
    # The user's email, which will serve as the unique identifier.
    email: str
    # The user's password.
    password: str

# Schema for the login request payload.
# It expects the user's email and password.
class UserLogin(BaseModel):
    email: str
    password: str

# Schema for the JWT token returned upon successful login or registration.
class Token(BaseModel):
    # The actual JWT string.
    access_token: str
    # The type of token, which is a constant "bearer".
    token_type: str = "bearer"

# --- Task Schemas ---
# Base schema for a task. This contains the common fields for creating and reading tasks.
class TaskBase(BaseModel):
    # The title of the task.
    title: str
    # An optional description for the task. It can be a string or None.
    description: Optional[str] = None
    # The completion status of the task, with a default value of False.
    completed: bool = False

# Schema for creating a new task.
# It inherits all fields from TaskBase, meaning it requires a title and can optionally
# include a description and completed status.
class TaskCreate(TaskBase):
    pass

# Schema for a Task when it is read or returned by an endpoint.
# This model includes fields from TaskBase plus additional fields generated by the API.
class Task(TaskBase):
    # The unique ID of the task, generated by the backend.
    id: int
    # The email of the user who owns this task, used for filtering.
    owner_email: str

    # Configuration for the Pydantic model.
    class Config:
        # This setting allows Pydantic models to be created from ORM (Object-Relational Mapper)
        # or other data structures that use attribute access (e.g., my_task.id) rather than
        # dictionary access (e.g., my_task['id']). This is useful for fetching data
        # from a database model and converting it directly into a Pydantic model.
        from_attributes = True